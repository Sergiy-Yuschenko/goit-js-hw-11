{"version":3,"sources":["task-03.js"],"names":["delay","ms","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","callback","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAyEA,aAzEA,QAAA,oBAIA,MAAMA,EAAQC,MAIRC,EAASC,GAAQC,QAAQC,uBAAuBF,aAGtDH,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,GAIjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,EAAUC,KAK3CA,EAJqBF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,KAOjEL,EAAgBH,EAAO,QAASH,QAAQY,OACxCN,EAAgBH,EAAO,OAAQH,QAAQY,OAGvCN,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAI5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzC1B,MAAAA,EAAQiB,EAA0B,IAAK,KAE7CU,WAAW,KACUP,KAAKE,SAAW,GAGjCG,EAAU,CAAEG,GAAIJ,EAAYI,GAAIzB,KAAMH,IAEtC0B,EAAQF,EAAYI,KAErB5B,IAGC6B,EAAa,EAAGD,GAAAA,EAAIzB,KAAAA,MACxBC,QAAQC,mBAAmBuB,kBAAmBzB,QAG1C2B,EAAWF,IACfxB,QAAQ2B,qCAAqCH,+BAI/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GACrDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GAGrDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH","file":"task-03.fb4c2bb5.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\n//Підзавдання 1\nconst delay = ms => {\n  // Change this function\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n//Підзавдання 2\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username, callback) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === username ? { ...user, active: !user.active } : user\n  );\n\n  callback(updatedUsers);\n};\n\n// Currently the function works like this\ntoggleUserState(users, 'Mango', console.table);\ntoggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n//Підзавдання 3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess({ id: transaction.id, time: delay });\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);"]}