{"version":3,"sources":["task-03.js"],"names":["inputFirstEl","document","querySelector","buttonFirstEl","disabled","inputDelay","addEventListener","event","currentTarget","value","removeAttribute","delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then"],"mappings":";;;AAoHA,aApHA,QAAA,oBAQA,MAAMA,EAAeC,SAASC,cAAc,gBAEtCC,EAAgBF,SAASC,cAAc,gBAE7CC,EAAcC,SAAW,OAEzB,IAAIC,EAAa,KAIjBL,EAAaM,iBAAiB,QAAUC,IACtCF,EAAwC,EAA3BE,EAAMC,cAAcC,MAC7BF,EAAMC,cAAcC,OAASF,EAAMC,cAAcC,MAAQ,GAAKF,EAAMC,cAAcC,OAAS,IAC7FN,EAAcO,gBAAgB,YAE9BP,EAAcC,SAAW,SAK7BC,EAAa,IAGb,MAAMM,EAAQC,GACL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACTF,EAAQF,GACRG,EAAO,QACNH,KAMDK,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDf,EAAcG,iBAAiB,QAAS,KACtCK,EAAMN,GAAYgB,KAAKJ","file":"task-03.4ea396e1.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\n\n\n//------------ ПІДЗАВДАННЯ 1 -----------------\n\n//Знаходимо інпут підзавдання 1\nconst inputFirstEl = document.querySelector('#first-input');\n//Знаходимо кнопку підзавдання 1\nconst buttonFirstEl = document.querySelector('[data-first]');\n//дезактивуємо кнопку підзавдання 1\nbuttonFirstEl.disabled = 'true';\n//контейнер для зберігання значення введеного в інпут підзавдання 1\nlet inputDelay = null;\n\n\n//Слухач інпуту підзавдання 1\ninputFirstEl.addEventListener('input', (event) => {\n  inputDelay = event.currentTarget.value *1;\n  if (event.currentTarget.value && event.currentTarget.value > 0 && event.currentTarget.value <= 10000) {\n    buttonFirstEl.removeAttribute('disabled');\n  } else {\n    buttonFirstEl.disabled = 'true';\n  }\n});\n\n\ninputDelay = 5000;\n\n\nconst delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n      reject('ups');\n    }, ms);\n  });\n};\n\n\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n//Слухач кнопки підзавдання 1\nbuttonFirstEl.addEventListener('click', () => {\n  delay(inputDelay).then(logger);\n});\n\n//------------ ПІДЗАВДАННЯ 2 -----------------\n\n//delay(inputDelay).then(logger)\n\n// // Tests\n// delay(inputDelay).then(logger); // Fulfilled after 2000ms\n// delay(1000).then(logger); // Fulfilled after 1000ms\n// delay(1500).then(logger); // Fulfilled after 1500ms\n\n// //Підзавдання 2\n\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: false },\n// ];\n\n// const toggleUserState = (allUsers, username, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === username ? { ...user, active: !user.active } : user\n//   );\n\n//   callback(updatedUsers);\n// };\n\n// // Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// // The function should work like this\n// toggleUserState(users, 'Mango').then(console.table);\n// toggleUserState(users, 'Ajax').then(console.table);\n\n// //Підзавдання 3\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess({ id: transaction.id, time: delay });\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = ({ id, time }) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// // Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// // The function should work like this\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);"]}