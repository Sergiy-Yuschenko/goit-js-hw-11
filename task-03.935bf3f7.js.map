{"version":3,"sources":["task-03.js"],"names":["inputFirstEl","document","querySelector","buttonFirstEl","disabled","inputDelay","addEventListener","event","currentTarget","value","removeAttribute","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","inputSecondEl","buttonSecondEl","selectedUser","users","name","active","toggleUserState","allUsers","username","map","user","table"],"mappings":";;;AAkIA,aAlIA,QAAA,oBAQA,MAAMA,EAAeC,SAASC,cAAc,gBAEtCC,EAAgBF,SAASC,cAAc,gBAE7CC,EAAcC,SAAW,OAEzB,IAAIC,EAAa,KAIjBL,EAAaM,iBAAiB,QAAUC,IACtCF,EAAwC,EAA3BE,EAAMC,cAAcC,MAC7BF,EAAMC,cAAcC,OAASF,EAAMC,cAAcC,MAAQ,GAAKF,EAAMC,cAAcC,OAAS,IAC7FN,EAAcO,gBAAgB,YAE9BP,EAAcC,SAAW,SAK7B,MAAMO,EAAQC,GACL,IAAIC,QAASC,IAClBC,WAAW,KACTD,EAAQF,IAEPA,KAKDI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDd,EAAcG,iBAAiB,QAAS,KACtCK,EAAMN,GAAYe,KAAKJ,KAazB,MAAMK,EAAgBpB,SAASC,cAAc,iBAEvCoB,EAAiBrB,SAASC,cAAc,iBAE9CoB,EAAelB,SAAW,OAE1B,IAAImB,EAAe,KAEnB,MAAMC,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IAExB,IAAIhB,QAASC,IAClBA,EAAQc,EAASE,IAAIC,GACnBA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAMrEV,EAAcf,iBAAiB,QAAUC,IACL,cAA9BA,EAAMC,cAAcC,MACtBa,EAAeZ,gBAAgB,YAE/BY,EAAelB,SAAW,OAE5BmB,EAAehB,EAAMC,cAAcC,QAGrCa,EAAehB,iBAAiB,QAAS,KACvCqB,EAAgBH,EAAOD,GAAcH,KAAKF,QAAQc","file":"task-03.935bf3f7.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\n\n\n//------------ ПІДЗАВДАННЯ 1 -----------------\n\n//Знаходимо інпут підзавдання 1\nconst inputFirstEl = document.querySelector('#first-input');\n//Знаходимо кнопку підзавдання 1\nconst buttonFirstEl = document.querySelector('[data-first]');\n//дезактивуємо кнопку підзавдання 1\nbuttonFirstEl.disabled = 'true';\n//контейнер для зберігання значення введеного в інпут підзавдання 1\nlet inputDelay = null;\n\n\n//Слухач інпуту підзавдання 1\ninputFirstEl.addEventListener('input', (event) => {\n  inputDelay = event.currentTarget.value *1;\n  if (event.currentTarget.value && event.currentTarget.value > 0 && event.currentTarget.value <= 10000) {\n    buttonFirstEl.removeAttribute('disabled');\n  } else {\n    buttonFirstEl.disabled = 'true';\n  }\n});\n\n// Функція яка повертає проміс, який виконується після затримки\nconst delay = ms => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms);\n      // reject('ups');\n    }, ms);\n  });\n};\n\n//Функція яка чіпляється на обробку проміса\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n//Слухач кнопки підзавдання 1\nbuttonFirstEl.addEventListener('click', () => {\n  delay(inputDelay).then(logger);\n});\n\n// delay(inputDelay).then(logger)\n\n// // Tests\n// delay(inputDelay).then(logger); // Fulfilled after 2000ms\n// delay(1000).then(logger); // Fulfilled after 1000ms\n// delay(1500).then(logger); // Fulfilled after 1500ms\n\n//------------ ПІДЗАВДАННЯ 2 -----------------\n\n//Знаходимо інпут підзавдання 1\nconst inputSecondEl = document.querySelector('#second-input');\n//Знаходимо кнопку підзавдання 1\nconst buttonSecondEl = document.querySelector('[data-second]');\n\nbuttonSecondEl.disabled = 'true';\n\nlet selectedUser = null;\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n\n    return new Promise((resolve) => {\n      resolve(allUsers.map(user =>\n        user.name === username ? { ...user, active: !user.active } : user\n      ));\n    });\n};\n\n//Слухач елементу поля \"select\"\ninputSecondEl.addEventListener('input', (event) => {\n  if (event.currentTarget.value !== \"undefined\") {\n    buttonSecondEl.removeAttribute('disabled');\n  } else {\n    buttonSecondEl.disabled = 'true';\n  }\n  selectedUser = event.currentTarget.value;\n});\n//Слухач кнопки підзавдання 2\nbuttonSecondEl.addEventListener('click', () => {\n  toggleUserState(users, selectedUser).then(console.table);\n});\n\n// // // The function should work like this\n// toggleUserState(users, 'Mango').then(console.table);\n// toggleUserState(users, 'Ajax').then(console.table);\n\n//------------ ПІДЗАВДАННЯ 3 -----------------\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess({ id: transaction.id, time: delay });\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = ({ id, time }) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// // Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// // The function should work like this\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);"]}